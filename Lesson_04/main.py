import Lesson_04.Scripts_2
from functools import reduce

# УРОК 4
#
# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы
# сотрудника. В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.


""" СКРИПТ В ФАЙЛЕ scripts.py
    можно скопировать следующие строки для запуска: 
    Scripts.py "Иванов И. И." 165 150 5000
    python Scripts.py "Иванов И. И." 165 150 ааа 
    
    Также если файл будет вызван без параметров (или с недостаточным количеством аргументов или 
    непосредственно в среде разработки - будет запрошен ввод параметров. Программа не упадет."""


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше
# предыдущего элемента. Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

print()
print("Задание 2. Вариант 1.")
print()

new_list = [j for i, j in zip(my_list, my_list[1:]) if j > i]
print(new_list)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

print()
print("Задание 3.")
print()

multiples_20_21 = [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]
print(multiples_20_21)

# 4.  Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый
# массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

print()
print("Задание 4.")
print()

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [el for el in my_list if my_list.count(el) == 1]
print(new_list)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти
# четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех
# элементов списка.
# Подсказка: использовать функцию reduce().

print()
print("Задание 5.")
print()

my_list = [i for i in range(100, 1001) if i % 2 == 0]
result = reduce((lambda x, y: x * y), my_list)
print(result)

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый
# цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения. Например, в первом
# задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также
# необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

print()
print("Задание 6.")
print()

Lesson_04.Scripts_2.numbers()
Lesson_04.Scripts_2.repeater()
Lesson_04.Scripts_2.numbers_or_repeater()

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только
# первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх
# 4! = 1 * 2 * 3 * 4 = 24.

print()
print("Задание 7. Генератор.")
print()

n = int(input("Факториал какого числа Вы хотите узнать? "))


def fact(n):
    count = 1
    for i in range(1, n + 1):
        count *= i
        yield count


for el in fact(n):
    print(el)

print()
print("Задание 7. Рекурсия.")
print()


def fact1(n):
    if n == 0:
        return 1
    else:
        return n * fact1(n - 1)


print(fact1(n))

print()
print("Задание 7. Reduce.")
print()


def fact2(n):
    factorial_list = [i for i in range(1, n + 1)]
    factorial = reduce(lambda x, y: x * y, factorial_list)
    return factorial


print(fact2(n))
