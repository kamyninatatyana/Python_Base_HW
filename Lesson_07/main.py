from Lesson_07.Classes import Matrix
import random as rd
import numpy
from Lesson_07.Classes import Coat, Suit
from Lesson_07.Classes import Cell

# УРОК 7
# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы. Подсказка: матрица — система
# некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов
# класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы
# складываем с первым элементом первой строки второй матрицы и т.д.

print("Task 1")
print("Matrix 1")
matrix1 = Matrix([[rd.randint(1, 100) for _ in range(rd.randint(2, 5))] for _ in range(rd.randint(2, 5))])
print(matrix1)

print()
print("Matrix 2")
matrix2 = Matrix([[rd.randint(1, 100) for _ in range(rd.randint(2, 5))] for _ in range(rd.randint(2, 5))])
print(matrix2)

print()
print("Converting to same size.")
matrix1.matrix_corrector(matrix2)
print("Matrix 1")
print(matrix1)
print("Matrix 2")
print(matrix2)

print()
print("Matrix1 + Matrix2:")
print(matrix1 + matrix2)


# 2. Реализовать проект расчета суммарного расхода ткани на производство одежды. Основная сущность (класс)
# этого проекта — одежда, которая может иметь определенное название. К типам одежды в этом проекте
# относятся пальто и костюм. У этих типов одежды существуют параметры: размер (для пальто) и рост
# (для костюма). Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5),
# для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания:
# реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора
# @property.

print("Task 2")

coat1 = Coat("Coat", 50)
suit1 = Suit("Suit", 1.85)

print(f"Total material consumption to make {coat1.name} size {coat1.size} and {suit1.name} height {suit1.height} - "
      f"{Suit.material_consumption(suit1) + Coat.material_consumption(coat1)}")

# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его
# конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться
# только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление
# клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек
# исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек
# в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
# переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все
# оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет
# строку: *****\n*****\n*****.

print()
print("Task 3")
print()

cell1 = Cell(10)
cell2 = Cell(30)

print(cell1 + cell2)
print(cell1 - cell2)
print(cell1 * cell2)
print(cell1 / cell2)

print()
print("Cell 1")
cell1.make_order(3)

print()
print("Cell 2")
cell2.make_order(14)